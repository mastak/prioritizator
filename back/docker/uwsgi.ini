[uwsgi]

socket = :8080
socket-timeout = 180

#http = :8080
#http-connect-timeout = 180
#http-keepalive = 180
#http-timeout = 180

# Django-related settings
# the base directory (full path)
chdir = /usr/src/back/prioritizator

# Django's wsgi file
module = prioritizator.wsgi

# process-related settings
# master
master = true

memory-report = true

# respawn processes after serving 50 requests
max-requests=100

# set cheaper algorithm to use, if not set default will be used
cheaper-algo = busyness

# minimum number of workers to keep at all times
cheaper = 2

# number of workers to spawn at startup
cheaper-initial = 2

# maximum number of workers that can be spawned
workers = 10

# maximum time (in seconds) we wait for workers and other processes to die during reload/shutdown
reload-mercy = 100

# how many workers should be spawned at a time
cheaper-step = 1

cheaper-overload = 10

#This option tells uWSGI how many idle cycles we need before stopping a worker.
#After reaching this limit uWSGI will stop a worker and reset this counter.
cheaper-busyness-multiplier = 5

cheaper-busyness-max = 75
cheaper-busyness-min = 40

cheaper-busyness-backlog-alert = 15

# soft limit will prevent cheaper from spawning new workers
# if workers total rss memory is equal or higher
# we use 150MB soft limit below (values are in bytes)
cheaper-rss-limit-soft = 157286400

# hard limit will force cheaper to cheap single worker
# if workers total rss memory is equal or higher
# we use 512MB hard limit below (values are in bytes)
cheaper-rss-limit-hard = 536870912

# clear environment on exit
vacuum = true

py-autoreload = 3
